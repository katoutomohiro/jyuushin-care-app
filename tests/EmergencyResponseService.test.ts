import { EmergencyResponseService, EmergencyAlert, EmergencyContact, EmergencyProtocol, EmergencyResponse, EmergencySettings } from '../services/EmergencyResponseService';
import { vi } from 'vitest';

describe('EmergencyResponseService', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    // テストデータをクリア
    EmergencyResponseService['alerts'].clear();
    EmergencyResponseService['contacts'].length = 0;
    EmergencyResponseService['protocols'].length = 0;
    EmergencyResponseService['responses'].length = 0;
  });

  describe('detectEmergency', () => {
    it('should detect vital signs emergency', async () => {
      const vitalSigns = {
        temperature: 40.0,
        bloodPressure: { systolic: 200, diastolic: 120 },
        pulse: 140,
        spO2: 85
      };
      const behavior = {};
      const environment = {};
      const alert = await EmergencyResponseService.detectEmergency('user1', 'テストユーザー', vitalSigns, behavior, environment);
      expect(alert).not.toBeNull();
      expect(alert!.type).toBe('medical');
      expect(alert!.severity).toBe('critical');
    });

    it('should detect behavioral emergency', async () => {
      const vitalSigns = { temperature: 36.5, pulse: 70, spO2: 98 };
      const behavior = {
        aggression: true,
        wandering: true,
        selfHarm: false
      };
      const environment = {};
      const alert = await EmergencyResponseService.detectEmergency('user1', 'テストユーザー', vitalSigns, behavior, environment);
      expect(alert).not.toBeNull();
      expect(alert!.type).toBe('behavioral');
    });

    it('should detect environmental emergency', async () => {
      const vitalSigns = { temperature: 36.5, pulse: 70, spO2: 98 };
      const behavior = {};
      const environment = {
        smoke: true,
        fire: false,
        gasLeak: false
      };
      const alert = await EmergencyResponseService.detectEmergency('user1', 'テストユーザー', vitalSigns, behavior, environment);
      expect(alert).not.toBeNull();
      expect(alert!.type).toBe('environmental');
    });

    it('should return null when no emergency detected', async () => {
      const vitalSigns = { temperature: 36.5, pulse: 70, spO2: 98 };
      const behavior = {};
      const environment = {};
      const alert = await EmergencyResponseService.detectEmergency('user1', 'テストユーザー', vitalSigns, behavior, environment);
      expect(alert).toBeNull();
    });

    it('should return null when auto detection is disabled', async () => {
      EmergencyResponseService.updateSettings({ autoDetectionEnabled: false });
      const vitalSigns = { temperature: 40.0 };
      const behavior = {};
      const environment = {};
      const alert = await EmergencyResponseService.detectEmergency('user1', 'テストユーザー', vitalSigns, behavior, environment);
      expect(alert).toBeNull();
      EmergencyResponseService.updateSettings({ autoDetectionEnabled: true });
    });
  });

  describe('createAlert', () => {
    it('should create emergency alert', async () => {
      const alert: EmergencyAlert = {
        id: 'alert1',
        userId: 'user1',
        userName: 'テストユーザー',
        type: 'medical',
        severity: 'high',
        description: '高血圧',
        detectedAt: new Date().toISOString(),
        location: '居室A',
        status: 'active',
        autoGenerated: true
      };
      await EmergencyResponseService.createAlert(alert);
      const alerts = EmergencyResponseService.getAllAlerts();
      expect(alerts.length).toBeGreaterThan(0);
      expect(alerts[0].id).toBe('alert1');
    });
  });

  describe('updateAlert', () => {
    it('should update alert status', async () => {
      const alert: EmergencyAlert = {
        id: 'alert2',
        userId: 'user1',
        userName: 'テストユーザー',
        type: 'safety',
        severity: 'medium',
        description: '転倒',
        detectedAt: new Date().toISOString(),
        location: '廊下',
        status: 'active',
        autoGenerated: false
      };
      await EmergencyResponseService.createAlert(alert);
      EmergencyResponseService.updateAlert('alert2', { status: 'acknowledged', assignedTo: 'nurse1' });
      const alerts = EmergencyResponseService.getAllAlerts();
      const updatedAlert = alerts.find(a => a.id === 'alert2');
      expect(updatedAlert!.status).toBe('acknowledged');
      expect(updatedAlert!.assignedTo).toBe('nurse1');
    });
  });

  describe('recordResponse', () => {
    it('should record emergency response', () => {
      const response: EmergencyResponse = {
        alertId: 'alert1',
        responderId: 'nurse1',
        responderName: '看護師A',
        action: 'バイタルチェック実施',
        timestamp: new Date().toISOString(),
        notes: '血圧は正常範囲内',
        nextAction: '継続観察'
      };
      EmergencyResponseService.recordResponse(response);
      const responses = EmergencyResponseService.getResponses('alert1');
      expect(responses.length).toBeGreaterThan(0);
      expect(responses[0].action).toBe('バイタルチェック実施');
    });
  });

  describe('resolveAlert', () => {
    it('should resolve alert', async () => {
      const alert: EmergencyAlert = {
        id: 'alert3',
        userId: 'user1',
        userName: 'テストユーザー',
        type: 'medical',
        severity: 'low',
        description: '軽度の頭痛',
        detectedAt: new Date().toISOString(),
        location: '居室A',
        status: 'active',
        autoGenerated: true
      };
      await EmergencyResponseService.createAlert(alert);
      EmergencyResponseService.resolveAlert('alert3', '鎮痛剤投与により改善');
      const alerts = EmergencyResponseService.getAllAlerts();
      const resolvedAlert = alerts.find(a => a.id === 'alert3');
      expect(resolvedAlert!.status).toBe('resolved');
      expect(resolvedAlert!.resolutionNotes).toBe('鎮痛剤投与により改善');
    });
  });

  describe('addContact', () => {
    it('should add emergency contact', () => {
      const contact: EmergencyContact = {
        id: 'contact1',
        name: '田中太郎',
        relationship: '息子',
        phone: '090-1234-5678',
        email: 'tanaka@example.com',
        priority: 1,
        notificationMethods: ['phone', 'email'],
        isActive: true
      };
      EmergencyResponseService.addContact(contact);
      const contacts = EmergencyResponseService.getContacts();
      expect(contacts.length).toBeGreaterThan(0);
      expect(contacts[0].name).toBe('田中太郎');
    });
  });

  describe('updateContact', () => {
    it('should update emergency contact', () => {
      const contact: EmergencyContact = {
        id: 'contact2',
        name: '田中花子',
        relationship: '娘',
        phone: '090-8765-4321',
        email: 'hanako@example.com',
        priority: 2,
        notificationMethods: ['phone'],
        isActive: true
      };
      EmergencyResponseService.addContact(contact);
      EmergencyResponseService.updateContact('contact2', { priority: 1, email: 'hanako2@example.com' });
      const contacts = EmergencyResponseService.getContacts();
      const updatedContact = contacts.find(c => c.id === 'contact2');
      expect(updatedContact!.priority).toBe(1);
      expect(updatedContact!.email).toBe('hanako2@example.com');
    });
  });

  describe('removeContact', () => {
    it('should remove emergency contact', () => {
      const contact: EmergencyContact = {
        id: 'contact3',
        name: '田中次郎',
        relationship: '兄弟',
        phone: '090-1111-2222',
        priority: 3,
        notificationMethods: ['phone'],
        isActive: true
      };
      EmergencyResponseService.addContact(contact);
      EmergencyResponseService.removeContact('contact3');
      const contacts = EmergencyResponseService.getContacts();
      const removedContact = contacts.find(c => c.id === 'contact3');
      expect(removedContact).toBeUndefined();
    });
  });

  describe('addProtocol', () => {
    it('should add emergency protocol', () => {
      const protocol: EmergencyProtocol = {
        id: 'protocol1',
        name: '転倒対応プロトコル',
        description: '転倒時の対応手順',
        triggers: ['転倒', '転落'],
        steps: [
          {
            order: 1,
            action: 'バイタルチェック',
            description: '意識、呼吸、脈拍を確認',
            responsibleRole: '看護師',
            estimatedTime: 2,
            isCritical: true
          }
        ],
        requiredContacts: ['contact1'],
        estimatedResponseTime: 5,
        isActive: true
      };
      EmergencyResponseService.addProtocol(protocol);
      const protocols = EmergencyResponseService.getProtocols();
      expect(protocols.length).toBeGreaterThan(0);
      expect(protocols[0].name).toBe('転倒対応プロトコル');
    });
  });

  describe('updateSettings', () => {
    it('should update emergency settings', () => {
      EmergencyResponseService.updateSettings({
        autoDetectionEnabled: false,
        criticalThresholds: {
          temperature: { min: 34.0, max: 40.0 },
          bloodPressure: { systolic: { min: 80, max: 200 }, diastolic: { min: 50, max: 120 } },
          pulse: { min: 40, max: 140 },
          spO2: { min: 85 },
          seizureDuration: { max: 10 }
        }
      });
      const settings = EmergencyResponseService.getSettings();
      expect(settings.autoDetectionEnabled).toBe(false);
      expect(settings.criticalThresholds.temperature.min).toBe(34.0);
    });
  });

  describe('getActiveAlerts', () => {
    it('should return only active alerts', async () => {
      const alert1: EmergencyAlert = {
        id: 'alert4',
        userId: 'user1',
        userName: 'テストユーザー',
        type: 'medical',
        severity: 'high',
        description: '高血圧',
        detectedAt: new Date().toISOString(),
        location: '居室A',
        status: 'active',
        autoGenerated: true
      };
      const alert2: EmergencyAlert = {
        id: 'alert5',
        userId: 'user1',
        userName: 'テストユーザー',
        type: 'safety',
        severity: 'medium',
        description: '転倒',
        detectedAt: new Date().toISOString(),
        location: '廊下',
        status: 'resolved',
        autoGenerated: false
      };
      await EmergencyResponseService.createAlert(alert1);
      await EmergencyResponseService.createAlert(alert2);
      const activeAlerts = EmergencyResponseService.getActiveAlerts();
      expect(activeAlerts.length).toBeGreaterThan(0);
      activeAlerts.forEach(alert => {
        expect(alert.status).toBe('active');
      });
    });
  });

  describe('getResponses', () => {
    it('should return responses for specific alert', () => {
      const response1: EmergencyResponse = {
        alertId: 'alert1',
        responderId: 'nurse1',
        responderName: '看護師A',
        action: 'バイタルチェック',
        timestamp: new Date().toISOString()
      };
      const response2: EmergencyResponse = {
        alertId: 'alert2',
        responderId: 'nurse2',
        responderName: '看護師B',
        action: '転倒対応',
        timestamp: new Date().toISOString()
      };
      EmergencyResponseService.recordResponse(response1);
      EmergencyResponseService.recordResponse(response2);
      const responses = EmergencyResponseService.getResponses('alert1');
      expect(responses.length).toBeGreaterThan(0);
      responses.forEach(response => {
        expect(response.alertId).toBe('alert1');
      });
    });
  });

  describe('Alert Management', () => {
    it('should create emergency alerts', () => {
      const alert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert);
      const alerts = EmergencyResponseService.getAllAlerts();
      
      expect(alerts).toContainEqual(alert);
      expect(alerts.length).toBe(1);
    });

    it('should update alert status', () => {
      const alert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert);
      EmergencyResponseService.updateAlertStatus('alert_1', 'acknowledged');
      
      const updatedAlert = EmergencyResponseService.getAlert('alert_1');
      expect(updatedAlert?.status).toBe('acknowledged');
    });

    it('should resolve alerts', () => {
      const alert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert);
      EmergencyResponseService.resolveAlert('alert_1', '血圧が正常範囲に戻りました');
      
      const resolvedAlert = EmergencyResponseService.getAlert('alert_1');
      expect(resolvedAlert?.status).toBe('resolved');
      expect(resolvedAlert?.resolutionNotes).toBe('血圧が正常範囲に戻りました');
    });

    it('should get alerts by severity', () => {
      const highAlert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      const lowAlert: EmergencyAlert = {
        id: 'alert_2',
        type: 'environmental',
        severity: 'low',
        title: '室温アラート',
        description: '室温が設定範囲外です',
        userId: 'user2',
        userName: '佐藤 花子',
        timestamp: new Date().toISOString(),
        location: '居室102',
        status: 'active',
        autoDetected: true
      };

      EmergencyResponseService.createAlert(highAlert);
      EmergencyResponseService.createAlert(lowAlert);

      const highAlerts = EmergencyResponseService.getAlertsBySeverity('high');
      expect(highAlerts.length).toBe(1);
      expect(highAlerts[0].severity).toBe('high');
    });
  });

  describe('Contact Management', () => {
    it('should add emergency contacts', () => {
      const contact: EmergencyContact = {
        id: 'contact_1',
        name: '田中 太郎',
        relationship: '家族（長男）',
        phone: '090-1234-5678',
        email: 'tanaka@example.com',
        priority: 1,
        notificationMethods: ['phone', 'email', 'sms'],
        isActive: true
      };

      EmergencyResponseService.addContact(contact);
      const contacts = EmergencyResponseService.getContacts();
      
      expect(contacts).toContainEqual(contact);
      expect(contacts.length).toBe(1);
    });

    it('should update contact information', () => {
      const contact: EmergencyContact = {
        id: 'contact_1',
        name: '田中 太郎',
        relationship: '家族（長男）',
        phone: '090-1234-5678',
        email: 'tanaka@example.com',
        priority: 1,
        notificationMethods: ['phone', 'email', 'sms'],
        isActive: true
      };

      EmergencyResponseService.addContact(contact);
      EmergencyResponseService.updateContact('contact_1', { phone: '090-8765-4321' });
      
      const updatedContact = EmergencyResponseService.getContact('contact_1');
      expect(updatedContact?.phone).toBe('090-8765-4321');
    });

    it('should get contacts by priority', () => {
      const highPriorityContact: EmergencyContact = {
        id: 'contact_1',
        name: '田中 太郎',
        relationship: '家族（長男）',
        phone: '090-1234-5678',
        priority: 1,
        notificationMethods: ['phone'],
        isActive: true
      };

      const lowPriorityContact: EmergencyContact = {
        id: 'contact_2',
        name: '佐藤 花子',
        relationship: '家族（長女）',
        phone: '090-8765-4321',
        priority: 2,
        notificationMethods: ['phone'],
        isActive: true
      };

      EmergencyResponseService.addContact(highPriorityContact);
      EmergencyResponseService.addContact(lowPriorityContact);

      const highPriorityContacts = EmergencyResponseService.getContactsByPriority(1);
      expect(highPriorityContacts.length).toBe(1);
      expect(highPriorityContacts[0].priority).toBe(1);
    });
  });

  describe('Protocol Management', () => {
    it('should add emergency protocols', () => {
      const protocol: EmergencyProtocol = {
        id: 'protocol_1',
        name: '発作対応プロトコル',
        description: 'てんかん発作が発生した場合の対応手順',
        triggers: ['発作', 'けいれん'],
        steps: [
          {
            order: 1,
            action: '安全確保',
            description: '周囲の危険物を除去し、安全な場所に移動',
            responsibleRole: '介護職員',
            estimatedTime: 1,
            isCritical: true
          }
        ],
        requiredContacts: ['contact_1'],
        estimatedResponseTime: 5,
        isActive: true
      };

      EmergencyResponseService.addProtocol(protocol);
      const protocols = EmergencyResponseService.getProtocols();
      
      expect(protocols).toContainEqual(protocol);
      expect(protocols.length).toBe(1);
    });

    it('should get protocols by trigger', () => {
      const seizureProtocol: EmergencyProtocol = {
        id: 'protocol_1',
        name: '発作対応プロトコル',
        description: 'てんかん発作が発生した場合の対応手順',
        triggers: ['発作', 'けいれん'],
        steps: [],
        requiredContacts: [],
        estimatedResponseTime: 5,
        isActive: true
      };

      const fallProtocol: EmergencyProtocol = {
        id: 'protocol_2',
        name: '転倒対応プロトコル',
        description: '転倒事故が発生した場合の対応手順',
        triggers: ['転倒', '転落'],
        steps: [],
        requiredContacts: [],
        estimatedResponseTime: 5,
        isActive: true
      };

      EmergencyResponseService.addProtocol(seizureProtocol);
      EmergencyResponseService.addProtocol(fallProtocol);

      const seizureProtocols = EmergencyResponseService.getProtocolsByTrigger('発作');
      expect(seizureProtocols.length).toBe(1);
      expect(seizureProtocols[0].triggers).toContain('発作');
    });
  });

  describe('Response Tracking', () => {
    it('should record emergency responses', () => {
      const response: EmergencyResponse = {
        alertId: 'alert_1',
        responderId: 'responder_1',
        responderName: '看護職員A',
        action: 'アラートを確認',
        timestamp: new Date().toISOString(),
        notes: 'アラートを確認しました'
      };

      EmergencyResponseService.recordResponse(response);
      const responses = EmergencyResponseService.getResponses('alert_1');
      
      expect(responses).toContainEqual(response);
      expect(responses.length).toBe(1);
    });

    it('should get response timeline', () => {
      const response1: EmergencyResponse = {
        alertId: 'alert_1',
        responderId: 'responder_1',
        responderName: '看護職員A',
        action: 'アラートを確認',
        timestamp: new Date(Date.now() - 1000).toISOString(),
        notes: 'アラートを確認しました'
      };

      const response2: EmergencyResponse = {
        alertId: 'alert_1',
        responderId: 'responder_2',
        responderName: '医師B',
        action: '医師が到着',
        timestamp: new Date().toISOString(),
        notes: '医師が到着しました'
      };

      EmergencyResponseService.recordResponse(response1);
      EmergencyResponseService.recordResponse(response2);

      const timeline = EmergencyResponseService.getResponseTimeline('alert_1');
      expect(timeline.length).toBe(2);
      expect(timeline[0].timestamp).toBe(response1.timestamp);
      expect(timeline[1].timestamp).toBe(response2.timestamp);
    });
  });

  describe('Auto Detection', () => {
    it('should detect critical vital signs', () => {
      const vitalSigns = {
        temperature: 40.0,
        bloodPressure: { systolic: 200, diastolic: 120 },
        pulse: 140,
        spO2: 85
      };

      const alerts = EmergencyResponseService.checkVitalSigns('user1', '田中 太郎', vitalSigns);
      
      expect(alerts.length).toBeGreaterThan(0);
      alerts.forEach(alert => {
        expect(alert.autoDetected).toBe(true);
        expect(alert.status).toBe('active');
      });
    });

    it('should not create alerts for normal vital signs', () => {
      const normalVitalSigns = {
        temperature: 36.8,
        bloodPressure: { systolic: 120, diastolic: 80 },
        pulse: 72,
        spO2: 98
      };

      const alerts = EmergencyResponseService.checkVitalSigns('user1', '田中 太郎', normalVitalSigns);
      expect(alerts.length).toBe(0);
    });
  });

  describe('Notification System', () => {
    it('should send notifications to contacts', async () => {
      const contact: EmergencyContact = {
        id: 'contact_1',
        name: '田中 太郎',
        relationship: '家族（長男）',
        phone: '090-1234-5678',
        email: 'tanaka@example.com',
        priority: 1,
        notificationMethods: ['phone', 'email'],
        isActive: true
      };

      EmergencyResponseService.addContact(contact);

      const alert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert);

      const notifications = await EmergencyResponseService.sendNotifications('alert_1');
      
      expect(notifications.length).toBeGreaterThan(0);
      notifications.forEach(notification => {
        expect(notification.contactId).toBe('contact_1');
        expect(notification.method).toBeDefined();
        expect(notification.status).toBeDefined();
      });
    });

    it('should escalate notifications if no response', async () => {
      const contact1: EmergencyContact = {
        id: 'contact_1',
        name: '田中 太郎',
        relationship: '家族（長男）',
        phone: '090-1234-5678',
        priority: 1,
        notificationMethods: ['phone'],
        isActive: true
      };

      const contact2: EmergencyContact = {
        id: 'contact_2',
        name: '佐藤 花子',
        relationship: '家族（長女）',
        phone: '090-8765-4321',
        priority: 2,
        notificationMethods: ['phone'],
        isActive: true
      };

      EmergencyResponseService.addContact(contact1);
      EmergencyResponseService.addContact(contact2);

      const alert: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'active',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert);

      // 最初の通知
      const initialNotifications = await EmergencyResponseService.sendNotifications('alert_1');
      expect(initialNotifications.length).toBeGreaterThan(0);

      // エスカレーション
      const escalatedNotifications = await EmergencyResponseService.escalateNotifications('alert_1');
      expect(escalatedNotifications.length).toBeGreaterThan(0);
    });
  });

  describe('Settings Management', () => {
    it('should update emergency settings', () => {
      const newSettings = {
        autoDetectionEnabled: false,
        criticalThresholds: {
          temperature: { min: 35.0, max: 39.0 },
          bloodPressure: { 
            systolic: { min: 90, max: 180 }, 
            diastolic: { min: 60, max: 110 } 
          },
          pulse: { min: 50, max: 120 },
          spO2: { min: 90 },
          seizureDuration: { max: 5 }
        },
        notificationSettings: {
          enableSMS: false,
          enableEmail: true,
          enablePush: true,
          enablePhone: true,
          escalationDelay: 5,
          maxEscalationLevel: 2
        },
        responseSettings: {
          autoCallAmbulance: true,
          autoCallPolice: false,
          requireConfirmation: false,
          responseTimeout: 10
        }
      };

      EmergencyResponseService.updateSettings(newSettings);
      const settings = EmergencyResponseService.getSettings();
      
      expect(settings.autoDetectionEnabled).toBe(false);
      expect(settings.notificationSettings.enableSMS).toBe(false);
      expect(settings.responseSettings.autoCallAmbulance).toBe(true);
    });
  });

  describe('Statistics and Reporting', () => {
    it('should generate emergency statistics', () => {
      // テストデータを作成
      const alert1: EmergencyAlert = {
        id: 'alert_1',
        type: 'medical',
        severity: 'high',
        title: '高血圧アラート',
        description: '血圧が180/110mmHgを超えています',
        userId: 'user1',
        userName: '田中 太郎',
        timestamp: new Date().toISOString(),
        location: '居室101',
        status: 'resolved',
        vitalSigns: {
          bloodPressure: { systolic: 185, diastolic: 115 }
        },
        autoDetected: true
      };

      const alert2: EmergencyAlert = {
        id: 'alert_2',
        type: 'environmental',
        severity: 'low',
        title: '室温アラート',
        description: '室温が設定範囲外です',
        userId: 'user2',
        userName: '佐藤 花子',
        timestamp: new Date().toISOString(),
        location: '居室102',
        status: 'active',
        autoDetected: true
      };

      EmergencyResponseService.createAlert(alert1);
      EmergencyResponseService.createAlert(alert2);

      const stats = EmergencyResponseService.getEmergencyStatistics();
      
      expect(stats.totalAlerts).toBe(2);
      expect(stats.activeAlerts).toBe(1);
      expect(stats.resolvedAlerts).toBe(1);
      expect(stats.alertsByType).toBeDefined();
      expect(stats.alertsBySeverity).toBeDefined();
    });
  });

  describe('Error Handling', () => {
    it('should handle invalid alert data', () => {
      const invalidAlert = {
        id: '',
        type: 'invalid_type',
        severity: 'invalid_severity',
        title: '',
        description: '',
        userId: '',
        userName: '',
        timestamp: 'invalid_date',
        location: '',
        status: 'invalid_status'
      };

      expect(() => {
        EmergencyResponseService.createAlert(invalidAlert as EmergencyAlert);
      }).toThrow();
    });

    it('should handle missing contact data', () => {
      expect(() => {
        EmergencyResponseService.getContact('nonexistent_contact');
      }).toThrow();
    });

    it('should handle invalid protocol triggers', () => {
      const invalidProtocol: EmergencyProtocol = {
        id: 'protocol_1',
        name: 'テストプロトコル',
        description: 'テスト用',
        triggers: [],
        steps: [],
        requiredContacts: [],
        estimatedResponseTime: -1,
        isActive: true
      };

      expect(() => {
        EmergencyResponseService.addProtocol(invalidProtocol);
      }).toThrow();
    });
  });
}); 